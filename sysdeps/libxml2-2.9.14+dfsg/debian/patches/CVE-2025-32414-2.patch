Backport of:

From 4d24aa22ac5811235904a02530fd8dce01c65f68 Mon Sep 17 00:00:00 2001
From: Maks Verver <maks@verver.ch>
Date: Sat, 5 Apr 2025 13:15:03 +0200
Subject: [PATCH] python: Add a test to reproduce bug #889

---
 python/meson.build       |  1 +
 python/tests/Makefile.am |  3 +-
 python/tests/unicode.py  | 61 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 64 insertions(+), 1 deletion(-)
 create mode 100755 python/tests/unicode.py

--- a/python/tests/Makefile.am
+++ b/python/tests/Makefile.am
@@ -48,7 +48,8 @@ PYTESTS=	\
     validRNG.py \
     compareNodes.py \
     xpathns.py \
-    xpathleak.py
+    xpathleak.py \
+    unicode.py
 
 XMLS=		\
     tst.xml	\
--- /dev/null
+++ b/python/tests/unicode.py
@@ -0,0 +1,61 @@
+from io import BytesIO, StringIO
+import libxml2
+import sys
+from xml.sax.handler import ContentHandler
+from xml.sax.xmlreader import InputSource
+import xml.sax
+
+
+# Test data: an XML file with a 100,000 Unicode smileys, which expand
+# into 400,000 bytes after UTF-8 encoding.
+SMILEY = '\U0001f600'
+TEXT = 100_000 * SMILEY
+XML_STRING = '<?xml version="1.0" encoding="UTF-8" ?>\n<root>' + TEXT + '</root>'
+XML_BYTES = XML_STRING.encode('utf-8')
+
+
+def RunTest(test_name, source):
+    expected = TEXT
+    received = ''
+
+    class TestHandler(ContentHandler):
+        def characters(self, content):
+            nonlocal received
+            received += content
+
+    reader = xml.sax.make_parser(['drv_libxml2'])
+    reader.setContentHandler(TestHandler())
+    reader.parse(source)
+    if expected != received:
+        print(test_name, 'failed!')
+        print('Expected length:', len(expected))
+        print('Received length:', len(received))
+        print('Expected text: (prefix only)', expected[:100])
+        print('Received text: (prefix only)', received[:100])
+        sys.exit(1)
+
+
+def TestBytesInput():
+    source = InputSource()
+    source.setByteStream(BytesIO(XML_BYTES))
+    RunTest('TestBytesInput', source)
+
+
+def TestStringInput():
+    source = InputSource()
+    source.setCharacterStream(StringIO(XML_STRING))
+    RunTest('TestStringInput', source)
+
+
+# Memory debug specific
+libxml2.debugMemory(1)
+
+TestBytesInput()
+TestStringInput()
+
+# Memory debug specific
+libxml2.cleanupParser()
+if libxml2.debugMemory(1) == 0:
+    print("OK")
+else:
+    print("Memory leak %d bytes" % (libxml2.debugMemory(1)))
